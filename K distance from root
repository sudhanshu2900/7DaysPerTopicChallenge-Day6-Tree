PROBLEM:  If below is given tree and k is 2. Then Output should be 4 5 6.

          1
       /     \
     2        3
   /        /  \
  4        5    6         => It is kth distance from root node
   \
    8
    
    
SOLUTION:

___________________________ ITRATIVE SOLUTION ________________________________________

            vector<int> Kdistance(struct Node *root, int k)
            {
                vector<int> res;
                queue<Node*> q;
                int d=0;
                q.push(root);
                if(k==0)
                    res.push_back(root->data);
                else{
                    while(q.size()>0 && d<k){
                        d++;
                        int size=q.size();
                        while(size--){
                            Node* temp=q.front();
                            q.pop();
                            if(temp->left)
                                q.push(temp->left);
                            if(temp->right)
                                q.push(temp->right);
                        }
                    }
                    while(q.size()>0){
                        res.push_back(q.front()->data);
                        q.pop();
                    }
                }
                return res;
            }
            
            
            
________________________________ RECURSIVE SOLUTION ________________________________________

              void findK(Node* root, int k, vector<int> &res){
                  if(root==NULL)
                      return;
                  if(k==0)
                          res.push_back(root->data);
                  else{
                      findK(root->left, k-1, res);
                      findK(root->right, k-1, res);
                  }
              }
              vector<int> Kdistance(struct Node *root, int k)
              {
                  vector<int> res;
                  findK(root, k, res);
                  return res;
              }
              
              
              
              
              
              
